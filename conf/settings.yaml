VENUE: '{{VENUE}}'
PGE_SIMULATION_MODE: !!bool true
CRID: '{{ CRID }}'

# for PST (CalVal products)
#DSWX_COLLECTION_NAME: "OPERA_L3_DSWX-HLS_PROVISIONAL_V0"
#DSWX_HLS_PRODUCT_VERSION: "0.0"

# uncomment out for OPS in R1
DSWX_COLLECTION_NAME: "OPERA_L3_DSWX-HLS_PROVISIONAL_V1"
DSWX_HLS_PRODUCT_VERSION: "1.0"

# CSLC & RTC in R2
CSLC_COLLECTION_NAME: "OPERA_L2_CSLC-S1_PROVISIONAL_V0"
RTC_COLLECTION_NAME: "OPERA_L2_RTC-S1_PROVISIONAL_V0"
CSLC_STATIC_COLLECTION_NAME: "OPERA_L2_CSLC-S1-STATIC_PROVISIONAL_V0"
RTC_STATIC_COLLECTION_NAME: "OPERA_L2_RTC-S1-STATIC_PROVISIONAL_V0"
CSLC_S1_PRODUCT_VERSION: "0.1"
RTC_S1_PRODUCT_VERSION: "0.4"
CSLC_S1_STATIC_PRODUCT_VERSION: "0.1"
RTC_S1_STATIC_PRODUCT_VERSION: "0.4"

# Shortname filtering on input product types. RegEx strings ('.' == any single character)
SHORTNAME_FILTERS:
  HLSL30:
#   - L.07 # Landsat-7
    - L.08 # Landsat-8
#   - L.09 # Landsat-9
  HLSS30:
#   - S1 # Sentinel-1
    - S2A # Sentinel-2A
    - S2B # Sentinel-2B
#   - S2C # Sentinel-2C

# Base API urls and login endpoints for the different DAAC environments.
DAAC_ENVIRONMENTS:
  OPS:
    BASE_URL: cmr.earthdata.nasa.gov
    EARTHDATA_LOGIN: urs.earthdata.nasa.gov

  UAT:
    BASE_URL: cmr.uat.earthdata.nasa.gov
    EARTHDATA_LOGIN: uat.urs.earthdata.nasa.gov

# Settings to set the latency period for various jobs
NOMINAL_LATENCY:
    # Latency period in minutes. Expiration time is calculated from when the LDF is being processed.
#   RRST_EVALUATOR: 60

URGENT_RESPONSE_LATENCY:
    # Latency period in minutes. Expiration time is calculated from when the LDF is being processed.
#    RRST_EVALUATOR: 60


# This area is intended to be used to set any PGE configurable settings that an operator can change
# during production.

# Time range values to use when querying for Orbit files for use with SLC-based jobs
POE_ORBIT_TIME_RANGE: 2  # Days
RES_ORBIT_TIME_RANGE: 3  # Hours

CSLC_S1:
  # Toggle static layer generation during processing
  ENABLE_STATIC_LAYERS: !!bool false
  # Validity start date used to tag static layer products
  DATA_VALIDITY_START_DATE: 20140403
  # Amount of margin in km to apply to staged ancillaries (DEM)
  ANCILLARY_MARGIN: 100
  # TODO: update product spec version numbers as necessary with subsequent deliveries
  # Product specification version for baseline products
  CSLC_PRODUCT_SPEC_VER: 0.1.7
  # Product specification version for static layer products
  CSLC_STATIC_PRODUCT_SPEC_VER: 0.1.2

DSWX_HLS:
  # Toggle ancillary overlap coverage check during processing
  CHECK_ANCILLARY_INPUTS_COVERAGE: !!bool true
  # Toggle application of ocean/shoreline masking during processing
  APPLY_OCEAN_MASKING: !!bool false
  # Amount of margin in km to apply to staged ancillaries (DEM/worldcover)
  ANCILLARY_MARGIN: 200

RTC_S1:
  # Toggle static layer generation during processing
  ENABLE_STATIC_LAYERS: !!bool false
  # Validity start date used to tag static layer products
  DATA_VALIDITY_START_DATE: 20140403
  # Amount of margin in km to apply to staged ancillaries (DEM)
  ANCILLARY_MARGIN: 100
  # Estimated geometric accuracy values needed for CEOS compliance
  # TODO: fill in with actual values once provided by PST
  ESTIMATED_GEOMETRIC_ACCURACY:
    BIAS_X: 0.0
    BIAS_Y: 0.0
    STDDEV_X: 0.0
    STDDEV_Y: 0.0

# End PGE Configuration section

PRODUCT_TYPES:
    Observation_Accountability_Report:
        Pattern: !!python/regexp '(?P<id>oad_(?P<ContentType>\w+)_(?P<ValidityStartDateTime>\d{4}-\d{3}T\d{2}:\d{2}:\d{2})_(?P<ValidityEndDateTime>\d{4}-\d{3}T\d{2}:\d{2}:\d{2})\.(xml|json))$'
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            Date_Time_Patterns: ['%Y-%jT%H:%M:%S']
        Strip_File_Extension: !!bool true
        Dataset_Keys:
            starttime: ValidityStartDateTime
            endtime: ValidityEndDateTime

    L1_S1_SLC:
        # Pattern for parsing SAFE archives containing SLC burst data from Sentinel-1, such as:
        # S1A_IW_SLC__1SDV_20220501T015035_20220501T015102_043011_0522A4_42CC.zip
        # This pattern groups the metadata information in the filename using named groups.
        #
        # See naming convention documentation (https://sentinels.copernicus.eu/web/sentinel/user-guides/sentinel-1-sar/naming-conventions)
        #
        Pattern: !!python/regexp '(?P<mission_id>S1A|S1B)_(?P<beam_mode>IW)_(?P<product_type>SLC)(?P<resolution>_)_(?P<level>1)(?P<class>S)(?P<pol>SH|SV|DH|DV)_(?P<start_ts>(?P<start_year>\d{4})(?P<start_month>\d{2})(?P<start_day>\d{2})T(?P<start_hour>\d{2})(?P<start_minute>\d{2})(?P<start_second>\d{2}))_(?P<stop_ts>(?P<stop_year>\d{4})(?P<stop_month>\d{2})(?P<stop_day>\d{2})T(?P<stop_hour>\d{2})(?P<stop_minute>\d{2})(?P<stop_second>\d{2}))_(?P<orbit_num>\d{6})_(?P<data_take_id>[0-9A-F]{6})_(?P<product_id>[0-9A-F]{4})[.](?P<format>zip)$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            Date_Time_Patterns: ['%Y%m%dT%H%M%S']
            Date_Time_Keys: ['start_ts', 'stop_ts']
        Dataset_Keys: {}

    L1_S1_ORB:
        # Pattern for parsing Orbit files, both Precise (POE) and Restituted (RES) files
        # containing the orbit ephemerides data for Sentinel-1 A/B, such as:
        # S1A_OPER_AUX_POEORB_OPOD_20220521T081912_V20220430T225942_20220502T005942.EOF
        # This pattern groups the metadata information in the filename using named groups.
        #
        # See naming convention documentation (https://sentinel.esa.int/documents/247904/351187/Copernicus_Sentinels_POD_Service_File_Format_Specification)
        #
        Pattern: !!python/regexp '(?P<mission_id>S1A|S1B)_(?P<file_class>OPER)_(?P<file_type>(?P<category>AUX)_(?P<semantic_desc>POEORB|RESORB))_(?P<instance_id>(?P<site>OPOD)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2}))_V(?P<valid_start_ts>(?P<valid_start_year>\d{4})(?P<valid_start_month>\d{2})(?P<valid_start_day>\d{2})T(?P<valid_start_hour>\d{2})(?P<valid_start_minute>\d{2})(?P<valid_start_second>\d{2}))_(?P<valid_stop_ts>(?P<valid_stop_year>\d{4})(?P<valid_stop_month>\d{2})(?P<valid_stop_day>\d{2})T(?P<valid_stop_hour>\d{2})(?P<valid_stop_minute>\d{2})(?P<valid_stop_second>\d{2})))[.](?P<format>EOF)$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            Date_Time_Patterns: ['%Y%m%dT%H%M%S']
            Date_Time_Keys: ['creation_ts', 'valid_start_ts', 'valid_stop_ts']
        Dataset_Keys: {}

    L2_HLS_L30:
        # Pattern for parsing filenames such as "HLS.L30.T22VEQ.2021248T143156.v2.0.Fmask.tif".
        # This pattern groups the metadata information in the filename using named groups.
        #
        # See naming convention documentation (https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/#hls-naming-conventions)
        #
        # Note: POSIX character class "[[:alnum:]]" is not supported in python's re, and so has been replaced with "[^\W_]" here.
        Pattern: !!python/regexp '(?P<product_shortname>HLS[.]L30)[.](?P<tile_id>T[^\W_]{5})[.](?P<acquisition_ts>(?P<year>\d{4})(?P<day_of_year>\d{3})T(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2}))[.](?P<collection_version>v\d+[.]\d+)[.](?P<band_or_qa>[^\W_]+)[.](?P<format>tif)$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # Custom Pattern for dates like "<year><day number of year>T<hour><minute><second>"
            # For example, "2021248T143156":
            #   year: 2021
            #   day number of year: 248
            #   hour (24hr): 14
            #   minute: 31
            #   second: 56
            Date_Time_Patterns: ['%Y%jT%H%M%S']

            # Specify the metadata key to convert to a start and end time for the dataset times
            Date_Time_Keys: ['acquisition_ts']
            # Specify the metadata key to use as the dataset version.
            #  Note: this affects the data product index name
            Dataset_Version_Key: 'collection_version'
        Dataset_Keys: {}

    L2_HLS_S30:
        # Pattern for parsing filenames such as "HLS.S30.T15SXR.2021250T163901.v2.0.Fmask.tif".
        # This pattern groups the metadata information in the filename using named groups.
        #
        # See naming convention documentation (https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/#hls-naming-conventions)
        #
        # Note: POSIX character class "[[:alnum:]]" is not supported in python's re, and so has been replaced with "[^\W_]" here.
        Pattern: !!python/regexp '(?P<product_shortname>HLS[.]S30)[.](?P<tile_id>T[^\W_]{5})[.](?P<acquisition_ts>(?P<year>\d{4})(?P<day_of_year>\d{3})T(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2}))[.](?P<collection_version>v\d+[.]\d+)[.](?P<band_or_qa>[^\W_]+)[.](?P<format>tif)$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # Custom Pattern for dates like "<year><day number of year>T<hour><minute><second>"
            # For example, "2021248T143156":
            #   year: 2021
            #   day number of year: 248
            #   hour (24hr): 14
            #   minute: 31
            #   second: 56
            Date_Time_Patterns: ['%Y%jT%H%M%S']

            # Specify the metadata key to convert to a start and end time for the dataset times
            Date_Time_Keys: ['acquisition_ts']
            # Specify the metadata key to use as the dataset version.
            #  Note: this affects the data product index name
            Dataset_Version_Key: 'collection_version'
        Dataset_Keys: {}

    L2_CSLC_S1:
        # Pattern for parsing output L2_CSLC-S1 product filenames, such as:
        # OPERA_L2_CSLC-S1_T064-135518-IW1_20220501T015035Z_20230807T212944Z_S1A_VV_v1.0.h5
        # This pattern groups the metadata information in the filename using named groups.
        Pattern: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>CSLC)-(?P<source>S1)_(?P<burst_id>\w{4}-\w{6}-\w{3})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)_(?P<pol>VV|VH|HH|HV|VV\+VH|HH\+HV)_(?P<product_version>v\d+[.]\d+))(_BROWSE)?[.](?P<ext>tif|tiff|h5|png|iso\.xml)$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            Date_Time_Patterns: ['%Y%m%dT%H%M%SZ']
            Date_Time_Keys: ['acquisition_ts', 'creation_ts']
            # Specify the metadata key to use as the dataset version.
            #  Note: this affects the data product index name
            Dataset_Version_Key: 'product_version'
        Dataset_Keys: {}

    L2_CSLC_S1_static_layers:
      # Pattern for parsing output L2_CSLC-S1 static layer product filenames, such as:
      # OPERA_L2_CSLC-S1-STATIC_T064-135524-IW2_20140101_20230807T234233Z_S1A_v1.0.h5
      # This pattern groups the metadata information in the filename using named groups.
      Pattern: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>CSLC)-(?P<source>S1)-STATIC_(?P<burst_id>\w{4}-\w{6}-\w{3})_(?P<validity_ts>(?P<validity_year>\d{4})(?P<validity_month>\d{2})(?P<validity_day>\d{2}))_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)_(?P<product_version>v\d+[.]\d+))[.](?P<ext>h5|iso\.xml)$'
      Strip_File_Extension: !!bool true
      Extractor: extractor.FilenameRegexMetExtractor
      Configuration:
        Date_Time_Patterns: [ '%Y%m%d', '%Y%m%dT%H%M%SZ' ]
        Date_Time_Keys: [ 'validity_ts', 'creation_ts' ]
        # Specify the metadata key to use as the dataset version.
        #  Note: this affects the data product index name
        Dataset_Version_Key: 'product_version'
      Dataset_Keys: { }

    L2_RTC_S1:
        # Pattern for parsing output L2_RTC-S1 product filenames, such as:
        # OPERA_L2_RTC-S1_T069-147174-IW3_20180504T104521Z_20230804T203850Z_S1B_30_v1.0.h5
        # OPERA_L2_RTC-S1_T069-147174-IW3_20180504T104521Z_20230804T203850Z_S1B_30_v1.0_VV.tif
        # OPERA_L2_RTC-S1_T069-147174-IW3_20180504T104521Z_20230804T203850Z_S1B_30_v1.0_mask.tif
        # OPERA_L2_RTC-S1_T069-147175-IW1_20180504T104522Z_20230804T203850Z_S1B_30_v1.0_BROWSE.png
        # This pattern groups the metadata information in the filename using named groups.
        Pattern: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>RTC)-(?P<source>S1)_(?P<burst_id>\w{4}-\w{6}-\w{3})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)_(?P<spacing>30)_(?P<product_version>v\d+[.]\d+))(_(?P<pol>VV|VH|HH|HV|VV\+VH|HH\+HV)|_BROWSE|_mask)?[.](?P<ext>tif|tiff|h5|png|iso\.xml)$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
          Date_Time_Patterns: ['%Y%m%dT%H%M%SZ']
          Date_Time_Keys: ['acquisition_ts', 'creation_ts']
          # Specify the metadata key to use as the dataset version.
          #  Note: this affects the data product index name
          Dataset_Version_Key: 'product_version'
        Dataset_Keys: {}

    L2_RTC_S1_static_layers:
      # Pattern for parsing output L2_RTC-S1 static layer product filenames, such as:
      # OPERA_L2_RTC-S1-STATIC_T069-147178-IW3_20140101_20230807T162755Z_S1B_30_v1.0.h5
      # OPERA_L2_RTC-S1-STATIC_T069-147178-IW3_20140101_20230807T162755Z_S1B_30_v1.0_incidence_angle.tif
      # OPERA_L2_RTC-S1-STATIC_T069-147178-IW3_20140101_20230807T162755Z_S1B_30_v1.0_number_of_looks.tif
      # This pattern groups the metadata information in the filename using named groups.
      Pattern: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>RTC)-(?P<source>S1)-STATIC_(?P<burst_id>\w{4}-\w{6}-\w{3})_(?P<validity_ts>(?P<validity_year>\d{4})(?P<validity_month>\d{2})(?P<validity_day>\d{2}))_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)_(?P<spacing>30)_(?P<product_version>v\d+[.]\d+))(_BROWSE|_(?P<static_layer_name>incidence_angle|mask|local_incidence_angle|number_of_looks|rtc_anf_gamma0_to_beta0|rtc_anf_gamma0_to_sigma0))?[.](?P<ext>tif|tiff|h5|png|iso\.xml)$'
      Strip_File_Extension: !!bool true
      Extractor: extractor.FilenameRegexMetExtractor
      Configuration:
        Date_Time_Patterns: [ '%Y%m%d', '%Y%m%dT%H%M%SZ' ]
        Date_Time_Keys: [ 'validity_ts', 'creation_ts' ]
        # Specify the metadata key to use as the dataset version.
        #  Note: this affects the data product index name
        Dataset_Version_Key: 'product_version'
      Dataset_Keys: { }

    L3_DSWx_HLS:
        # Pattern for parsing filenames such as:
        # * "OPERA_L3_DSWx-HLS_T22VEQ_20210905T143156Z_20220105T143156Z_L8_30_v0.1_B01_WTF.tif"
        # * "OPERA_L3_DSWx-HLS_T15SXR_20210907T163901Z_20220207T163901Z_S2A_30_v0.1_B09_CLOUD.tif"
        # This pattern groups the metadata information in the filename using named groups.
        #
        # Note: POSIX character class "[[:alnum:]]" is not supported in python's re, and so has been replaced with "[^\W_]" here.
        Pattern: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L3)_(?P<product_type>DSWx)-(?P<source>HLS)_(?P<tile_id>T[^\W_]{5})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S2A|S2B|L8|L9)_(?P<spacing>30)_(?P<product_version>v\d+[.]\d+))_(?P<band_index>B\d{2})_(?P<band_name>WTR|BWTR|CONF|DIAG|WTR-1|WTR-2|LAND|SHAD|CLOUD|DEM)[.](?P<ext>tif|tiff)$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # Custom Pattern for dates like "<year><month><day>T<hour><minute><second>"
            # For example, "20210211T163901":
            #   year: 2021
            #   month: 02 (February)
            #   day of month: 11 (the 11th)
            #   hour (24hr): 16
            #   minute: 39
            #   second: 01
            Date_Time_Patterns: ['%Y%m%dT%H%M%SZ']

            # Specify the metadata key to convert to a start and end time for the dataset times
            Date_Time_Keys: ['acquisition_ts', 'creation_ts']
            # Specify the metadata key to use as the dataset version.
            #  Note: this affects the data product index name
            Dataset_Version_Key: 'product_version'
        Dataset_Keys: {}


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: ONLY MODIFY THE SETTINGS BELOW IF YOU KNOW WHAT YOU'RE DOING !!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Settings to enable forceful ingest of PGE outputs (a.k.a disable no-clobber errors)
# These settings only take effect on those PGE jobs that produce datasets that get
# pushed to object storage.
FORCE_INGEST:
    INGEST_STAGED: !!bool false
